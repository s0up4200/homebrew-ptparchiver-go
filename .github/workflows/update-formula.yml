name: Update Formula

on:
  repository_dispatch:
    types: [check-for-updates]
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  update-formula:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Get latest release
        id: latest_release
        run: |
          latest_version=$(curl -s https://api.github.com/repos/s0up4200/ptparchiver-go/releases/latest | jq -r .tag_name)
          
          # Check if we got a valid version (not null or empty)
          if [[ "$latest_version" == "null" || -z "$latest_version" ]]; then
            echo "Error: Failed to get a valid version tag from GitHub API"
            echo "updated=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "version=${latest_version}" >> $GITHUB_OUTPUT
          
          download_url="https://github.com/s0up4200/ptparchiver-go/archive/refs/tags/${latest_version}.tar.gz"
          echo "download_url=${download_url}" >> $GITHUB_OUTPUT
          
          # Verify we can actually download the tarball
          if ! curl -sf -I "${download_url}" > /dev/null; then
            echo "Error: Could not access the download URL: ${download_url}"
            echo "updated=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          sha256=$(curl -sL "${download_url}" | sha256sum | cut -d ' ' -f 1)
          
          # Verify we got a valid SHA256
          if [[ -z "$sha256" || ${#sha256} -ne 64 ]]; then
            echo "Error: Failed to generate valid SHA256 hash"
            echo "updated=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "updated=true" >> $GITHUB_OUTPUT

      - name: Update Formula
        id: update
        if: steps.latest_release.outputs.updated == 'true'
        run: |
          current_version=$(grep -m 1 'url.*tags/v' Formula/ptparchiver-go.rb | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+')
          if [ "$current_version" != "${{ steps.latest_release.outputs.version }}" ]; then
            sed -i "s|url.*|url \"${{ steps.latest_release.outputs.download_url }}\"|" Formula/ptparchiver-go.rb
            sed -i "s|sha256.*|sha256 \"${{ steps.latest_release.outputs.sha256 }}\"|" Formula/ptparchiver-go.rb
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.latest_release.outputs.updated == 'true' && steps.update.outputs.updated == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "ptparchiver-go ${{ steps.latest_release.outputs.version }}"
          title: "ptparchiver-go ${{ steps.latest_release.outputs.version }}"
          body: |
            Updates ptparchiver-go to ${{ steps.latest_release.outputs.version }}
            
            This PR was created automatically by the update-formula workflow.
          branch: update-ptparchiver
          delete-branch: true
          labels: bump-formula-pr,go